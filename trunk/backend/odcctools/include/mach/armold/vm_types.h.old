/*
 *      Header file for VM data types.  PPC version.
 */

#ifndef _MACH_PPC_VM_TYPES_H_
#define _MACH_PPC_VM_TYPES_H_

#ifndef ASSEMBLER

#include <arm/_types.h>
#include <stdint.h>

/*
 * natural_t and integer_t are Mach's legacy types for machine-
 * independent integer types (unsigned, and signed, respectively).
 * Their original purpose was to define other types in a machine/
 * compiler independent way.
 *
 * They also had an implicit "same size as pointer" characteristic
 * to them (i.e. Mach's traditional types are very ILP32 or ILP64
 * centric).  We support PowerPC ABIs that do not follow either of
 * these models (specifically LP64).  Therefore, we had to make a
 * choice between making these types scale with pointers or stay
 * tied to integers.  Because their use is predominantly tied to
 * to the size of an integer, we are keeping that association and
 * breaking free from pointer size guarantees.
 *
 * New use of these types is discouraged.
 */
typedef __darwin_natural_t      natural_t;
typedef int                     integer_t;

#if defined(__ppc__)

/*
 * For 32-bit PowerPC ABIs, the scalable types were
 * always based upon natural_t (unsigned int).
 * Because of potential legacy issues with name mangling,
 * we cannot use the stdint uintptr_t type.
 */
typedef natural_t               vm_offset_t;
typedef natural_t               vm_size_t;

#else /* __ppc64__ */

/*
 * For 64-bit PowerPC ABIs, we have no legacy name mangling
 * issues, so we use the stdint types for scaling these
 * types to the same size as a pointer.
 */
typedef uintptr_t               vm_offset_t;
typedef uintptr_t               vm_size_t;

#endif

/*
 * This new type is independent of a particular vm map's
 * implementation size - and represents appropriate types
 * for all possible maps.  This is used for interfaces
 * where the size of the map is not known - or we don't
 * want to have to distinguish.
 */
typedef uint64_t                mach_vm_address_t;
typedef uint64_t                mach_vm_offset_t;
typedef uint64_t                mach_vm_size_t;

/* LP64todo - convert these over for good */
#if 1
typedef uint64_t                vm_map_offset_t;
typedef uint64_t                vm_map_address_t;
typedef uint64_t                vm_map_size_t;
#else
typedef uint32_t                vm_map_offset_t;
typedef uint32_t                vm_map_address_t;
typedef uint32_t                vm_map_size_t;
#endif


#endif  /* ASSEMBLER */

/*
 * If composing messages by hand (please do not)
 */
#define MACH_MSG_TYPE_INTEGER_T MACH_MSG_TYPE_INTEGER_32

#endif  /* _MACH_PPC_VM_TYPES_H_ */

